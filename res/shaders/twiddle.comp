#version 460 core

#define PI 3.1415926535897932384626433832795

layout (local_size_x = 1, local_size_y = 16) in;

layout (binding = 0, rgba32f) writeonly uniform image2D twiddleIndices;

layout (std430, binding = 1) buffer indices {
    int j[];
} bit_reversed;

uniform int N;

struct complex {
    float real;
    float im;
};

void main() {
    vec2 x = gl_GlobalInvocationID.xy;
    float k = mod(x.y * (float(N) / pow(2, x.x + 1)), N);
    complex twiddle = complex(cos(2.0 * PI * k / float(N)), sin(2.0 * PI * k / float(N)));

    int butterflySpan = int(pow(2, x.x));

    int butterflyWing;

    if (mod(x.y, pow(2, x.x + 1)) < pow(2, x.x))
        butterflyWing = 1;
    else
        butterflyWing = 0;

    if (x.x == 0) {
        if (butterflyWing == 1)
            imageStore(twiddleIndices, ivec2(x), vec4(twiddle.real, twiddle.im, bit_reversed.j[int(x.y)], bit_reversed.j[int(x.y + 1)]));
        else
            imageStore(twiddleIndices, ivec2(x), vec4(twiddle.real, twiddle.im, bit_reversed.j[int(x.y - 1)], bit_reversed.j[int(x.y)]));
    } else {
        if (butterflyWing == 1)
            imageStore(twiddleIndices, ivec2(x), vec4(twiddle.real, twiddle.im, x.y, x.y + butterflySpan));
        else
            imageStore(twiddleIndices, ivec2(x), vec4(twiddle.real, twiddle.im, x.y - butterflySpan, x.y));
    }
}
